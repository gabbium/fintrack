name: Backend ‚Äî Validate

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "backend/**"
      - ".github/workflows/backend-validate.yml"
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - ".github/workflows/backend-validate.yml"

jobs:
  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: üì¶ Checkout | Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Setup | .NET 9.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: üßæ Verify | .editorconfig Compliance
        run: dotnet format --verify-no-changes --verbosity minimal

  sonar-analysis:
    name: "SonarCloud ‚Äî Analyze"
    runs-on: ubuntu-latest
    needs: format-check
    defaults:
      run:
        working-directory: backend

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: üì¶ Checkout | Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ‚òï Setup | Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu

      - name: ‚öôÔ∏è Setup | .NET 9.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: üì¶ Install | SonarScanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: üìä Run | SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"gabbium_fintrack" \
            /n:"fintrack" \
            /o:"gabbium" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.qualitygate.wait=true \
            /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml \
            /d:sonar.exclusions=**/Migrations/**
          dotnet build --configuration Release
          dotnet test --configuration Release --no-build --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  docker-validate:
    name: "Docker ‚Äî Build check (no push)"
    runs-on: ubuntu-latest
    needs: format-check
    strategy:
      matrix:
        include:
          - name: ledger-api
            file: backend/services/Ledger/src/Fintrack.Ledger.Api/Dockerfile
            context: backend
          - name: ledger-migrationservice
            file: backend/services/Ledger/src/Fintrack.Ledger.MigrationService/Dockerfile
            context: backend

    steps:
      - name: üì¶ Checkout | Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üß∞ Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: üê≥ Validate ${{ matrix.name }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        env:
          DOCKER_BUILD_SUMMARY: "false"
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          call: check

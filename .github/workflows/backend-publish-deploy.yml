name: Backend ‚Äî Publish & Deploy

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: backend-publish-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  guard:
    name: Guard | Ensure ref is a tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: ‚úÖ Validate ref type
        run: |
          echo "ref=${{ github.ref }}  ref_type=${{ github.ref_type }}  ref_name=${{ github.ref_name }}"
          if [ "${{ github.ref_type }}" != "tag" ]; then
            echo "::error::This workflow must be run from a TAG (vX.Y.Z). Re-run and pick a tag in 'Use workflow from'."
            exit 1
          fi
      - name: üè∑Ô∏è Extract version from tag
        id: extract
        run: |
          raw="${{ github.ref_name }}"      # e.g., v1.2.3
          ver="${raw#v}"                    # -> 1.2.3
          if ! [[ "$ver" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format '$raw' (expected vX.Y.Z)."
            exit 1
          fi
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "Resolved version: $ver"

  publish_images:
    name: Build & Push | Docker Images
    needs: guard
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout at selected ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: üîß Setup | Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: üîë Login | Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Build & Push (ledger-api)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: backend
          file: backend/services/Ledger/src/Fintrack.Ledger.Api/Dockerfile
          tags: gabbium/fintrack-ledger-api:${{ needs.guard.outputs.version }}
          push: true
          provenance: false
          sbom: false

      - name: üê≥ Build & Push (ledger-migrationservice)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: backend
          file: backend/services/Ledger/src/Fintrack.Ledger.MigrationService/Dockerfile
          tags: gabbium/fintrack-ledger-migrationservice:${{ needs.guard.outputs.version }}
          push: true
          provenance: false
          sbom: false

  deploy:
    name: Apply | Terraform
    needs: [guard, publish_images]
    runs-on: ubuntu-latest

    env:
      TF_VAR_image_version: ${{ needs.guard.outputs.version }}
      TF_VAR_authentication_oidc_jwt_authority: ${{ secrets.AUTHENTICATION_OIDC_JWT_AUTHORITY }}
      TF_VAR_ledger_db_connection_string: ${{ secrets.LEDGER_DB_CONNECTION_STRING }}

    defaults:
      run:
        working-directory: infra/terraform

    steps:
      - name: üì¶ Checkout at selected ref
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: ‚öôÔ∏è Setup | Terraform 1.9.x
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: 1.9.5

      - name: üß∞ Init
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=rg-shared" \
            -backend-config="storage_account_name=stgabbiumtfstate" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=fintrack/prod.tfstate"

      - name: üìã Plan
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -input=false -lock=false

      - name: üöÄ Apply
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve -input=false -lock=false

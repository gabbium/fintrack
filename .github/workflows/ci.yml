name: CI Pipeline

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-checks:
    name: Code Quality & Testing

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"
      DOTNET_NOLOGO: "true"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: "zulu"

      - name: Setup .NET 9.0.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Sonar begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"gabbium_fintrack" \
            /n:"fintrack" \
            /o:"gabbium" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml \
            /d:sonar.exclusions=**/Migrations/**

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test (with hang protection & diagnostics)
        timeout-minutes: 5
        run: |
          mkdir -p TestResults
          dotnet test \
            --configuration Release \
            --no-build \
            --logger "console;verbosity=detailed" \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory TestResults \
            --blame-hang --blame-hang-timeout 5m \
            --blame-hang-dump-type mini

      - name: Sonar end
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"
